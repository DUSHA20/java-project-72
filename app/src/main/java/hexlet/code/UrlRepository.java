package hexlet.code;

import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDateTime;
import java.sql.Timestamp;
import java.util.Map;
import java.math.BigDecimal;


public class UrlRepository extends BaseRepository {

    // Конструктор, который устанавливает соединение с базой данных
    public UrlRepository(Connection connection) {
        super(connection);
    }

    public void initializeDatabase() {
        try (Statement statement = connection.createStatement()) {
            String createUrlsTableSql = "CREATE TABLE IF NOT EXISTS urls (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "name VARCHAR(255) NOT NULL," +
                    "created_at TIMESTAMP NOT NULL" +
                    ")";
            statement.executeUpdate(createUrlsTableSql);

            String createChecksTableSql = "CREATE TABLE IF NOT EXISTS Checks (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "url_id BIGINT," +
                    "title VARCHAR(255)," +
                    "h1 VARCHAR(255)," +
                    "description TEXT," +
                    "created_at TIMESTAMP NOT NULL," +
                    "FOREIGN KEY (url_id) REFERENCES urls(id)" +
                    ")";
            statement.executeUpdate(createChecksTableSql);

            String createTFIDFResultsTableSql = "CREATE TABLE IF NOT EXISTS TFIDFResults (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "url_id BIGINT," +
                    "word VARCHAR(255)," +
                    "tfidf DOUBLE PRECISION," +
                    "created_at TIMESTAMP NOT NULL," +
                    "FOREIGN KEY (url_id) REFERENCES urls(id)" +
                    ")";
            statement.executeUpdate(createTFIDFResultsTableSql);

            String createPageSpeedAnalysisTableSql = "CREATE TABLE IF NOT EXISTS PageSpeedAnalysis (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "url_id BIGINT," +
                    "analysis_result TEXT NOT NULL," +
                    "created_at TIMESTAMP NOT NULL," +
                    "FOREIGN KEY (url_id) REFERENCES urls(id)" +
                    ")";
            statement.executeUpdate(createPageSpeedAnalysisTableSql);

            String createSpeedAnalysisTableSql = "CREATE TABLE IF NOT EXISTS SpeedAnalysis (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "url_id BIGINT," +
                    "load_time BIGINT NOT NULL," +
                    "content_length INT NOT NULL," +
                    "request_count INT NOT NULL," +
                    "is_cdn_used BOOLEAN NOT NULL," +
                    "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP," +
                    "FOREIGN KEY (url_id) REFERENCES urls(id)" +
                    ")";
            statement.executeUpdate(createSpeedAnalysisTableSql);

            System.out.println("Tables 'urls', 'Checks','TFIDFResults' and 'SpeedAnalysis' created successfully");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Метод для проверки существования URL в базе данных
    public boolean exists(String url) {
        String sql = "SELECT COUNT(*) FROM urls WHERE name = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, url);
            try (ResultSet resultSet = statement.executeQuery()) {
                resultSet.next();
                return resultSet.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Метод для добавления URL в базу данных
    public void addUrl(String url) {
        String sql = "INSERT INTO urls (name, created_at) VALUES (?, NOW())";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, url);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Url getLastInsertedUrl() {
        Url url = null;
        String sql = "SELECT * FROM urls ORDER BY id DESC LIMIT 1";
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                url = new Url();
                url.setId(resultSet.getLong("id"));
                url.setName(resultSet.getString("name"));
                Timestamp timestamp = resultSet.getTimestamp("created_at");
                LocalDateTime createdAt = timestamp.toLocalDateTime();
                url.setCreatedAt(createdAt);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return url;
    }

    // Метод для получения списка всех URL из базы данных
    public List<Url> getAllUrls() {
        List<Url> urls = new ArrayList<>();
        String sql = "SELECT * FROM urls"; // Получаем все данные из таблицы urls
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                Url url = new Url();
                url.setId(resultSet.getLong("id"));
                url.setName(resultSet.getString("name"));

                // Получаем дату и время в формате Timestamp
                Timestamp timestamp = resultSet.getTimestamp("created_at");
                // Преобразуем Timestamp в LocalDateTime
                LocalDateTime createdAt = timestamp.toLocalDateTime();

                url.setCreatedAt(createdAt);
                urls.add(url);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return urls;
    }

    // Метод для получения URL по идентификатору из базы данных
    public Url getUrlById(long id) {
        Url url = null;
        String sql = "SELECT id, name, created_at FROM urls WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setLong(1, id);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    long urlId = resultSet.getLong("id");
                    String name = resultSet.getString("name");
                    LocalDateTime createdAt = resultSet.getTimestamp("created_at").toLocalDateTime();
                    url = new Url(urlId, name, createdAt); // Используем конструктор с параметрами
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return url;
    }

    public Long getUrlIdByName(String name) {
        Long urlId = null;
        String sql = "SELECT id FROM urls WHERE name = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    urlId = resultSet.getLong("id");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return urlId;
    }

    // Метод для добавления информации о проверке URL в базу данных
    public void addUrlCheck(String url, String title, String h1, String description) {
        try {
            Long urlId = getUrlIdByName(url); // Получаем id URL
            if (urlId != null) {
                PreparedStatement statement = connection.prepareStatement("INSERT INTO Checks (url_id, title, h1, description, created_at) VALUES (?, ?, ?, ?, ?)");
                statement.setLong(1, urlId);
                statement.setString(2, title);
                statement.setString(3, h1);
                statement.setString(4, description);
                statement.setTimestamp(5, java.sql.Timestamp.valueOf(LocalDateTime.now()));
                statement.executeUpdate();
            } else {
                System.out.println("URL not found: " + url);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Метод для получения информации о проверках конкретного URL из базы данных
    public List<UrlCheck> getUrlChecksByUrl(String url) {
        List<UrlCheck> urlChecks = new ArrayList<>();
        try {
            PreparedStatement statement = connection.prepareStatement("SELECT * FROM Checks WHERE url = ?");
            statement.setString(1, url);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                UrlCheck urlCheck = new UrlCheck();
                urlCheck.setId(resultSet.getLong("id"));
                urlCheck.setUrl(resultSet.getLong("url_id"));
                urlCheck.setTitle(resultSet.getString("title"));
                urlCheck.setH1(resultSet.getString("h1"));
                urlCheck.setDescription(resultSet.getString("description"));
                urlCheck.setCreatedAt(resultSet.getTimestamp("created_at").toLocalDateTime());
                urlChecks.add(urlCheck);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return urlChecks;
    }

    public List<UrlCheck> getAllUrlChecks() {
        List<UrlCheck> urlChecks = new ArrayList<>();
        String sql = "SELECT * FROM Checks"; // Получаем все данные из таблицы url_checks
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                UrlCheck urlCheck = new UrlCheck();
                urlCheck.setId(resultSet.getLong("id"));
                urlCheck.setUrl(resultSet.getLong("url_id"));
                urlCheck.setTitle(resultSet.getString("title"));
                urlCheck.setH1(resultSet.getString("h1"));
                urlCheck.setDescription(resultSet.getString("description"));
                Timestamp timestamp = resultSet.getTimestamp("created_at");
                // Преобразуем Timestamp в LocalDateTime
                LocalDateTime createdAt = timestamp.toLocalDateTime();
                urlCheck.setCreatedAt(createdAt);

                urlChecks.add(urlCheck);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return urlChecks;
    }

    public void addTFIDFCheck(String url, Map<String, Double> tfidfMap) {
        try {
            Long urlId = getUrlIdByName(url);
            if (urlId != null) {
                PreparedStatement statement = connection.prepareStatement("INSERT INTO TFIDFResults (url_id, word, tfidf, created_at) VALUES (?, ?, ?, ?)");
                for (Map.Entry<String, Double> entry : tfidfMap.entrySet()) {
                    String word = entry.getKey();
                    Double tfidf = entry.getValue();

                    BigDecimal tfidfBigDecimal = BigDecimal.valueOf(tfidf);

                    statement.setLong(1, urlId);
                    statement.setString(2, word);
                    statement.setBigDecimal(3, tfidfBigDecimal);
                    statement.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()));
                    statement.executeUpdate();
                }
            } else {
                System.out.println("URL not found: " + url);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<TFIDFCheck> getAllTFIDFChecks() {
        List<TFIDFCheck> tfidfchecks = new ArrayList<>();
        String sql = "SELECT * FROM TFIDFResults"; // Получаем все данные из таблицы TFIDFResults
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                TFIDFCheck tfidfcheck = new TFIDFCheck();
                tfidfcheck.setId(resultSet.getLong("id"));
                tfidfcheck.setUrlId(resultSet.getLong("url_id"));
                tfidfcheck.setWord(resultSet.getString("word"));
                tfidfcheck.setTfidf(resultSet.getBigDecimal("tfidf"));

                Timestamp timestamp = resultSet.getTimestamp("created_at");
                // Преобразуем Timestamp в LocalDateTime
                LocalDateTime createdAt = timestamp.toLocalDateTime();
                tfidfcheck.setCreatedAt(createdAt);

                tfidfchecks.add(tfidfcheck);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return tfidfchecks;
    }

    public void addPageAnalysis(String url, Long loadTime, Integer contentLength, Integer requestCount, Boolean isCdnUsed) {
        try {
            Long urlId = getUrlIdByName(url);
            if (urlId != null) {
                PreparedStatement statement = connection.prepareStatement("INSERT INTO SpeedAnalysis (url_id, load_time, content_length, request_count, is_cdn_used, created_at) VALUES (?, ?, ?, ?, ?, ?)");
                statement.setLong(1, urlId);
                statement.setLong(2, loadTime);
                statement.setInt(3, contentLength);
                statement.setInt(4, requestCount);
                statement.setBoolean(5, isCdnUsed);
                statement.setTimestamp(6, Timestamp.valueOf(LocalDateTime.now()));
                statement.executeUpdate();
            } else {
                System.out.println("URL not found: " + url);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<PageSpeedAnalysis> getAllSpeedAnalysis() {
        List<PageSpeedAnalysis> pagespeedAnalysisList = new ArrayList<>();
        String sql = "SELECT * FROM SpeedAnalysis"; // Получаем все данные из таблицы SpeedAnalysis
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                PageSpeedAnalysis pagespeedAnalysis = new PageSpeedAnalysis();
                pagespeedAnalysis.setId(resultSet.getLong("id"));
                pagespeedAnalysis.setUrlId(resultSet.getLong("url_id"));
                pagespeedAnalysis.setLoadTime(resultSet.getLong("load_time"));
                pagespeedAnalysis.setContentLength(resultSet.getInt("content_length"));
                pagespeedAnalysis.setRequestCount(resultSet.getInt("request_count"));
                pagespeedAnalysis.setCdnUsed(resultSet.getBoolean("is_cdn_used"));

                Timestamp timestamp = resultSet.getTimestamp("created_at");
                // Преобразуем Timestamp в LocalDateTime
                LocalDateTime createdAt = timestamp.toLocalDateTime();
                pagespeedAnalysis.setCreatedAt(createdAt);

                pagespeedAnalysisList.add(pagespeedAnalysis);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return pagespeedAnalysisList;
    }
}
