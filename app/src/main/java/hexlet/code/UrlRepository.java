package hexlet.code;

import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDateTime;


public class UrlRepository extends BaseRepository {

    // Конструктор, который устанавливает соединение с базой данных
    public UrlRepository(Connection connection) {
        super(connection);
    }

    // Метод для инициализации базы данных и создания таблицы urls
    public void initializeDatabase() {
        try (Statement statement = connection.createStatement()) {
            String sql = "CREATE TABLE IF NOT EXISTS urls ("
                    + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "name VARCHAR(255) NOT NULL,"
                    + "created_at TIMESTAMP NOT NULL"
                    + ")";
            statement.executeUpdate(sql);
            System.out.println("Table 'urls' created successfully");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Метод для проверки существования URL в базе данных
    public boolean exists(String url) {
        String sql = "SELECT COUNT(*) FROM urls WHERE name = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, url);
            try (ResultSet resultSet = statement.executeQuery()) {
                resultSet.next();
                return resultSet.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Метод для добавления URL в базу данных
    public void addUrl(String url) {
        String sql = "INSERT INTO urls (name, created_at) VALUES (?, NOW())";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, url);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Метод для получения списка всех URL из базы данных
    public List<String> getAllUrls() {
        List<String> urls = new ArrayList<>();
        String sql = "SELECT name FROM urls";
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                String url = resultSet.getString("name");
                urls.add(url);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return urls;
    }

    // Метод для получения URL по идентификатору из базы данных
    public Url getUrlById(long id) {
        Url url = null;
        String sql = "SELECT id, name, created_at FROM urls WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setLong(1, id);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    long urlId = resultSet.getLong("id");
                    String name = resultSet.getString("name");
                    LocalDateTime createdAt = resultSet.getTimestamp("created_at").toLocalDateTime();
                    url = new Url(urlId, name, createdAt); // Используем конструктор с параметрами
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return url;
    }
}
